{"version":3,"file":"static/webpack/static/development/pages/index.js.83dcd60d6eb5d170a407.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport Head from 'next/head';\n\nfunction getDist(p1, p2) {\n  let a = p2[0] - p1[0];\n  let b = p2[1] - p1[1];\n  return Math.sqrt(a * a + b * b);\n}\n\nlet padding = 10;\nlet size = 10;\nlet colors = ['blue', 'hotpink', 'limegreen'];\n\nlet lh = 16 * 1.5;\n\n// mode 0 = move\n// mode 1 = adjust\n// mode 2 = grab\n\nlet Home = () => {\n  let [grid, setGrid] = useState(null);\n  let [mode, setMode] = useState(0);\n  let [color, setColor] = useState('dark');\n  let cpRef = useRef([0, 0, 10, 10]);\n  let canvasRef = useRef();\n  let cursorRef = useRef();\n  let readout = useRef();\n  let keymap = useRef({});\n  let cache = useRef(null);\n  let [help, setHelp] = useState(true);\n\n  function KeyTip(letter, color) {\n    return (\n      <span\n        className=\"keytip\"\n        onClick={() => {\n          keymap.current[letter] = true;\n          keyAction(letter, false);\n          setTimeout(() => {\n            keymap.current[letter] = false;\n          }, 300);\n        }}\n        style={{\n          outline: color === 'dark' ? 'solid 1px white' : 'solid 1px black',\n          paddingLeft: '0.5ch',\n          paddingRight: '0.5ch',\n          textAlign: 'center',\n          display: 'inline-block',\n          userSelect: 'none',\n          cursor: 'default',\n        }}\n      >\n        {letter === ' ' ? 'spacebar' : letter}\n      </span>\n    );\n  }\n\n  function reset() {\n    if (cache !== null) {\n      drawImage(cache.current);\n    }\n  }\n\n  function keyAction(letter, repeat) {\n    let c = canvasRef.current;\n    let ctx = c.getContext('2d');\n    let cp = cpRef.current;\n    let dpr = window.devicePixelRatio || 1;\n    let kc = keymap.current;\n\n    function dp(val) {\n      return val * dpr;\n    }\n\n    if (letter === 'a' && !repeat) {\n      setMode(0);\n    } else if (letter === 's' && !repeat) {\n      setMode(1);\n    } else if (letter === 'd' && !repeat) {\n      setMode(2);\n    } else if (letter === 'r' && !repeat) {\n      reset();\n    } else if (letter === 'o' && !repeat) {\n      let input = document.createElement('input');\n      input.setAttribute('type', 'file');\n      input.dispatchEvent(\n        new MouseEvent(`click`, {\n          bubbles: true,\n          cancelable: true,\n          view: window,\n        })\n      );\n\n      function handleChange(e) {\n        for (const item of this.files) {\n          if (item.type.indexOf('image') < 0) {\n            continue;\n          }\n          let src = URL.createObjectURL(item);\n          drawImage(src);\n        }\n        this.removeEventListener('change', handleChange);\n      }\n      input.addEventListener('change', handleChange);\n    } else if (letter === 'b') {\n      setColor(function(prevState) {\n        return prevState === 'light' ? 'dark' : 'light';\n      });\n    } else if (letter === 'e' && !repeat) {\n      let link = document.createElement('a');\n\n      var revokeURL = function() {\n        let me = this;\n        requestAnimationFrame(function() {\n          URL.revokeObjectURL(me.href);\n          me.href = null;\n        });\n        this.removeEventListener('click', revokeURL);\n      };\n\n      ctx.canvas.toBlob(function(blob) {\n        link.setAttribute('download', 'freeconfig.png');\n        link.setAttribute('href', URL.createObjectURL(blob));\n        link.addEventListener('click', revokeURL);\n        link.dispatchEvent(\n          new MouseEvent(`click`, {\n            bubbles: true,\n            cancelable: true,\n            view: window,\n          })\n        );\n      });\n    } else if (letter === '?') {\n      setHelp(prevState => {\n        return !prevState;\n      });\n    }\n\n    if (mode === 0) {\n      if (kc['j']) {\n        cp[1] += 1;\n        if (cp[1] + cp[3] > grid[1]) cp[1] -= 1;\n      }\n      if (kc['k']) {\n        cp[1] -= 1;\n        if (cp[1] < 0) cp[1] = 0;\n      }\n      if (kc['l']) {\n        cp[0] += 1;\n        if (cp[0] + cp[2] > grid[0]) cp[0] -= 1;\n      }\n      if (kc['h']) {\n        cp[0] -= 1;\n        if (cp[0] < 0) cp[0] = 0;\n      }\n    } else if (mode === 1) {\n      if (kc['k']) {\n        cp[3] -= 1;\n        if (cp[3] < 1) cp[3] = 1;\n      }\n      if (kc['j']) {\n        cp[3] += 1;\n        if (cp[1] + cp[3] > grid[1]) cp[3] -= 1;\n      }\n      if (kc['h']) {\n        cp[2] -= 1;\n        if (cp[2] < 1) cp[2] = 1;\n      }\n      if (kc['l']) {\n        cp[2] += 1;\n        if (cp[0] + cp[2] > grid[0]) cp[2] -= 1;\n      }\n    } else if (mode === 2) {\n      if (kc['h']) {\n        if (cp[0] > 0) {\n          let s = size;\n          let p = padding;\n\n          let to_move = [(cp[0] - 1) * s + p, cp[1] * s + p, 1 * s, cp[3] * s];\n\n          let t = document.createElement('canvas');\n          t.width = dp(to_move[2]);\n          t.height = dp(to_move[3]);\n          let tx = t.getContext('2d');\n          tx.scale(dpr, dpr);\n          tx.drawImage(\n            c,\n            ...to_move.map(c => dp(c)),\n            0,\n            0,\n            to_move[2],\n            to_move[3]\n          );\n\n          ctx.drawImage(\n            c,\n            dp(cp[0] * s + p),\n            dp(cp[1] * s + p),\n            dp(cp[2] * s),\n            dp(cp[3] * s),\n            (cp[0] - 1) * s + p,\n            cp[1] * s + p,\n            cp[2] * s,\n            cp[3] * s\n          );\n          ctx.drawImage(\n            t,\n            (cp[0] + cp[2] - 1) * s + p,\n            cp[1] * s + p,\n            to_move[2],\n            to_move[3]\n          );\n\n          cp[0] -= 1;\n        }\n      }\n      if (kc['j']) {\n        if (cp[1] + cp[3] < grid[1]) {\n          let s = size;\n          let p = padding;\n\n          let to_move = [\n            cp[0] * s + p,\n            (cp[1] + cp[3]) * s + p,\n            cp[2] * s,\n            1 * s,\n          ];\n\n          let t = document.createElement('canvas');\n          t.width = dp(to_move[2]);\n          t.height = dp(to_move[3]);\n          let tx = t.getContext('2d');\n\n          tx.scale(dpr, dpr);\n          tx.drawImage(\n            c,\n            ...to_move.map(c => dp(c)),\n            0,\n            0,\n            to_move[2],\n            to_move[3]\n          );\n\n          ctx.drawImage(\n            c,\n            dp(cp[0] * s + p),\n            dp(cp[1] * s + p),\n            dp(cp[2] * s),\n            dp(cp[3] * s),\n            cp[0] * s + p,\n            (cp[1] + 1) * s + p,\n            cp[2] * s,\n            cp[3] * s\n          );\n          ctx.drawImage(\n            t,\n            cp[0] * s + p,\n            cp[1] * s + p,\n            to_move[2],\n            to_move[3]\n          );\n\n          cp[1] += 1;\n        }\n      }\n      if (kc['k']) {\n        if (cp[1] > 0) {\n          let s = size;\n          let p = padding;\n\n          let to_move = [cp[0] * s + p, (cp[1] - 1) * s + p, cp[2] * s, 1 * s];\n\n          let t = document.createElement('canvas');\n          t.width = dp(to_move[2]);\n          t.height = dp(to_move[3]);\n          let tx = t.getContext('2d');\n\n          tx.scale(dpr, dpr);\n          tx.drawImage(\n            c,\n            ...to_move.map(c => dp(c)),\n            0,\n            0,\n            to_move[2],\n            to_move[3]\n          );\n\n          ctx.drawImage(\n            c,\n            dp(cp[0] * s + p),\n            dp(cp[1] * s + p),\n            dp(cp[2] * s),\n            dp(cp[3] * s),\n            cp[0] * s + p,\n            (cp[1] - 1) * s + p,\n            cp[2] * s,\n            cp[3] * s\n          );\n          ctx.drawImage(\n            t,\n            cp[0] * s + p,\n            (cp[1] + cp[3] - 1) * s + p,\n            to_move[2],\n            to_move[3]\n          );\n\n          cp[1] -= 1;\n        }\n      }\n      if (kc['l']) {\n        if (cp[0] + cp[2] < grid[0]) {\n          let s = size;\n          let p = padding;\n\n          let to_move = [\n            (cp[0] + cp[2]) * s + p,\n            cp[1] * s + p,\n            1 * s,\n            cp[3] * s,\n          ];\n\n          let t = document.createElement('canvas');\n          t.width = dp(to_move[2]);\n          t.height = dp(to_move[3]);\n          let tx = t.getContext('2d');\n          tx.scale(dpr, dpr);\n          tx.drawImage(\n            c,\n            ...to_move.map(c => dp(c)),\n            0,\n            0,\n            to_move[2],\n            to_move[3]\n          );\n\n          ctx.drawImage(\n            c,\n            dp(cp[0] * s + p),\n            dp(cp[1] * s + p),\n            dp(cp[2] * s),\n            dp(cp[3] * s),\n            (cp[0] + 1) * s + p,\n            cp[1] * s + p,\n            cp[2] * s,\n            cp[3] * s\n          );\n          ctx.drawImage(\n            t,\n            cp[0] * s + p,\n            cp[1] * s + p,\n            to_move[2],\n            to_move[3]\n          );\n\n          cp[0] += 1;\n        }\n      }\n    }\n\n    drawCursor();\n  }\n\n  function downHandler(e) {\n    keymap.current[e.key] = true;\n    keyAction(e.key, e.repeat);\n  }\n\n  function upHandler(e) {\n    keymap.current[e.key] = false;\n  }\n\n  function drawImage(src) {\n    cache.current = src;\n\n    let dimensions = [window.innerWidth, window.innerHeight];\n\n    let c = canvasRef.current;\n    let ctx = c.getContext('2d');\n    let w = dimensions[0] - padding * 2;\n    let h = dimensions[1] - padding * 3 - lh;\n    let a = w / h;\n\n    let img = new Image();\n    img.onload = () => {\n      let pa = img.width / img.height;\n      let pw = img.width;\n      let ph = img.height;\n      if (a >= pa) {\n        if (ph > h) {\n          ph = h;\n          pw = h * pa;\n        }\n      } else if (a < pa) {\n        if (pw > w) {\n          pw = w;\n          ph = w / pa;\n        }\n      }\n\n      pw = Math.floor(pw / size) * size;\n      ph = Math.floor(ph / size) * size;\n\n      let dpr = window.devicePixelRatio || 1;\n\n      c.width = pw * dpr + padding * 2;\n      c.height = ph * dpr + padding * 2;\n      c.style.width = pw + padding * 2 + 'px';\n      c.style.height = ph + padding * 2 + 'px';\n      c.style.marginLeft = 'auto';\n      c.style.marginRight = 'auto';\n\n      ctx.scale(dpr, dpr);\n\n      let cur = cursorRef.current;\n      cur.width = pw * dpr + padding * 2;\n      cur.height = ph * dpr + padding * 2;\n      cur.style.width = pw + padding * 2 + 'px';\n      cur.style.height = ph + padding * 2 + 'px';\n\n      let curtx = cur.getContext('2d');\n\n      curtx.scale(dpr, dpr);\n\n      ctx.drawImage(img, padding, padding, pw, ph);\n      setGrid([pw / size, ph / size]);\n    };\n    img.src = src;\n  }\n\n  function onPaste(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    for (const item of e.clipboardData.items) {\n      if (item.type.indexOf('image') < 0) {\n        continue;\n      }\n      let file = item.getAsFile();\n      let src = URL.createObjectURL(file);\n      drawImage(src);\n    }\n  }\n\n  function onDrop(e) {\n    e.preventDefault();\n    e.stopPropagation();\n    let file = e.dataTransfer.files[0];\n    let filename = file.path ? file.path : file.name ? file.name : '';\n    let src = URL.createObjectURL(file);\n    drawImage(src);\n  }\n\n  function onDrag(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  }\n\n  function drawCursor() {\n    let r = cursorRef.current;\n    let p = padding;\n    let rtx = cursorRef.current.getContext('2d');\n    let cp = cpRef.current;\n    rtx.clearRect(0, 0, r.offsetWidth, r.offsetHeight);\n    rtx.lineWidth = 2;\n    if (mode === 0) {\n      rtx.strokeStyle = colors[0];\n    } else if (mode === 1) {\n      rtx.strokeStyle = colors[1];\n    } else if (mode === 2) {\n      rtx.strokeStyle = colors[2];\n    }\n    rtx.strokeRect(\n      cp[0] * size + p,\n      cp[1] * size + p,\n      cp[2] * size,\n      cp[3] * size\n    );\n\n    if (grid !== null) {\n      let ro = readout.current;\n      ro.innerHTML = `${grid[0]}x${grid[1]}&nbsp;  ${cp[0]},${cp[1]} ${cp[2]}x${\n        cp[3]\n      }`;\n    }\n  }\n\n  useEffect(() => {\n    if (grid !== null) {\n      drawCursor();\n    }\n  }, [mode, grid]);\n\n  useEffect(() => {\n    let dimensions = [window.innerWidth, window.innerHeight];\n\n    drawImage('/static/lion.jpg');\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    window.addEventListener('paste', onPaste, false);\n    window.addEventListener('dragover', onDrag, false);\n    window.addEventListener('drop', onDrop, false);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n      window.removeEventListener('paste', onPaste, false);\n      window.removeEventListener('dragover', onDrag, false);\n      window.removeEventListener('drop', onDrop, false);\n    };\n  }, [mode, grid]);\n\n  return (\n    <div>\n      <Head>\n        <title>Freeconfig</title>\n      </Head>\n      <style jsx global>{`\n        @font-face {\n          font-family: 'custom';\n          src: url('/static/IBMPlexMono-Regular.woff2') format('woff2'),\n            url('/static/IBMPlexMono-Regular.woff') format('woff');\n        }\n        * {\n          box-sizing: border-box;\n        }\n        html {\n          font-family: custom, monospace;\n          font-size: 14px;\n          line-height: 1.5;\n          background: ${color === 'dark' ? '#222' : '#eee'};\n          color: ${color === 'dark' ? '#fff' : '#000'};\n        }\n        body {\n          margin: 0;\n          overflow: auto;\n        }\n        textarea {\n          font-family: inherit;\n          font-size: inherit;\n          line-height: inherit;\n        }\n        p {\n          margin: 0;\n        }\n        a {\n          color: inherit;\n        }\n      `}</style>\n      <div>\n        <canvas style={{ display: 'block' }} ref={canvasRef} />\n        <canvas\n          style={{\n            position: 'absolute',\n            left: '50%',\n            top: 0,\n            transform: `translate(-50%,0)`,\n          }}\n          ref={cursorRef}\n        />\n      </div>\n      <div\n        style={{ position: 'absolute', bottom: padding, paddingLeft: '2ch' }}\n        ref={readout}\n      />\n      <div\n        style={{\n          position: 'fixed',\n          outline: color === 'dark' ? 'solid 1px white' : 'solid 1px black',\n          display: help ? 'block' : 'none',\n          maxWidth: `calc(100% - 3rem)`,\n          background:\n            color === 'dark' ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.8)',\n          paddingLeft: '2ch',\n          paddingRight: '2ch',\n          paddingBottom: '0.75rem',\n          paddingTop: '0.75rem',\n          right: '1.5rem',\n          bottom: '1.5rem',\n        }}\n      >\n        <div style={{ marginBottom: '0.75rem', maxWidth: '60ch' }}>\n          Freeconfig let's you move image pixels around like blocks.\n        </div>\n        <div style={{ marginBottom: '0.375rem', maxWidth: '60ch' }}>Mode</div>\n        <div style={{ marginBottom: '0.75rem' }}>\n          {KeyTip('a', color)}{' '}\n          <span style={{ background: mode === 0 ? colors[0] : 'transparent' }}>\n            move\n          </span>\n          &nbsp; {KeyTip('s', color)}{' '}\n          <span style={{ background: mode === 1 ? colors[1] : 'transparent' }}>\n            adjust size\n          </span>\n          &nbsp; {KeyTip('d', color)}{' '}\n          <span style={{ background: mode === 2 ? colors[2] : 'transparent' }}>\n            grab\n          </span>\n        </div>\n        {mode === 0 ? (\n          <div style={{ marginBottom: '0.375rem', maxWidth: '60ch' }}>\n            Move cursor\n          </div>\n        ) : null}\n        {mode === 1 ? (\n          <div style={{ marginBottom: '0.375rem', maxWidth: '60ch' }}>\n            Adjust cursor size\n          </div>\n        ) : null}\n        {mode === 2 ? (\n          <div style={{ marginBottom: '0.375rem', maxWidth: '60ch' }}>\n            Move selection\n          </div>\n        ) : null}\n\n        <div style={{ marginBottom: '0.75rem' }}>\n          {[['h', '←'], ['j', '↓'], ['k', '↑'], ['l', '→']].map(a => (\n            <span>\n              {KeyTip(a[0], color)} {a[1]}&nbsp;{' '}\n            </span>\n          ))}\n        </div>\n\n        <div style={{ marginBottom: '0.375rem', maxWidth: '60ch' }}>Image</div>\n        <div style={{ marginBottom: '0.75rem', maxWidth: '60ch' }}>\n          To add an image you can paste, drop, or press {KeyTip('o', color)} to\n          open a file dialog.{' '}\n          <a href=\"https://unsplash.com/photos/QMRN_GX7p4I\" target=\"_blank\">\n            Lion photo by Maurits Bausenhart↗\n          </a>\n        </div>\n\n        <div style={{ marginBottom: '0.375rem', maxWidth: '60ch' }}>\n          Special\n        </div>\n\n        <div style={{ marginBottom: '0.75rem' }}>\n          {KeyTip('r', color)} reset image&nbsp; {KeyTip('e', color)} save as\n          png&nbsp; {KeyTip('b', color)}{' '}\n          {color === 'dark' ? 'light bg' : 'dark bg'}\n        </div>\n      </div>\n      {help ? null : (\n        <div\n          style={{\n            position: 'fixed',\n            right: '1.5rem',\n            bottom: '1.5rem',\n            background:\n              color === 'dark' ? 'rgba(0,0,0,0.8)' : 'rgba(255,255,255,0.8)',\n          }}\n        >\n          {KeyTip('?', color)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AACA;AAWA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAWA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AApBA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAOA;AAWA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAMA;AAWA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAMA;AAWA;AAQA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAMA;AAWA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAMA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAZA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgcA;AACA;AACA;;;;A","sourceRoot":""}